"""
Django settings for asilinks project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
from urllib import parse
import datetime as dt
from decimal import Decimal as d

from django.utils.translation import ugettext_lazy as _
from mongoengine import connect

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MAIN_DIR = os.path.dirname(BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY',
    '(@r5zi+!$evz(jwn)m960mm#w!oko*hye9(bq))4vj1ss0&%b+')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') != 'FALSE'

# ALLOWED_HOSTS = ('*')
# CORS_ORIGIN_ALLOW_ALL = True
ALLOWED_HOSTS = ('.asilinks.com', 'localhost', 'testserver', )
CORS_ORIGIN_REGEX_WHITELIST = (r'^(https?://)?(\w+\.)?asilinks\.com$', )


# Application definition

INSTALLED_APPS = [
    # Django apps
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.messages',
    # 'django.contrib.staticfiles',

    # Third party apps
    'django_extensions',
    'corsheaders',
    'rest_framework',
    'rest_framework_mongoengine',
    'storages',
    'django_nose',

    # Internal apps
    'admin',
    'authentication',
    'fcm',
    'main',
    'requesting',
    'payments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'asilinks.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'asilinks.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE' : 'django.db.backends.dummy',
    }
}

connect(os.environ.get('MONGO_DATABASE', 'asilinks_dev'),
    host=os.environ.get('MONGO_HOST', 'mongo'),
    authentication_source=os.environ.get('MONGO_AUTHDB', 'admin'),
    username=os.environ.get('MONGO_USERNAME', 'asilinks_app'),
    password=os.environ.get('MONGO_PASSWORD'),
)

AUTH_USER_MODEL = 'authentication.MongoUser'
MONGOENGINE_USER_DOCUMENT = 'authentication.documents.Account'
MONGOENGINE_USERNAME_FIELDS = 'email'
MONGOENGINE_USER_REQUIRED_FIELDS = []


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGES = (
    ('en', _('English')),
    ('es', _('Spanish')),
)

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_DEFAULT_ACL = 'public-read'
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', 'asilinks-media')
AWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN',
    '{}.s3.amazonaws.com'.format(AWS_STORAGE_BUCKET_NAME))
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

AWS_PUBLIC_MEDIA_LOCATION = 'public'
DEFAULT_FILE_STORAGE = 'asilinks.storage_backends.PublicMediaStorage'

AWS_PRIVATE_MEDIA_LOCATION = 'private'
PRIVATE_FILE_STORAGE = 'asilinks.storage_backends.PrivateMediaStorage'
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880 # 5MB


# Email Settings

EMAIL_HOST = 'email-smtp.us-west-2.amazonaws.com'
EMAIL_HOST_USER = AWS_ACCESS_KEY_ID
EMAIL_HOST_PASSWORD = os.environ.get('AWS_SMTP_PASSWORD')
DEFAULT_FROM_EMAIL = 'Asilinks System <noreply@asilinks.com>'
EMAIL_REDIRECT_DOMAIN = os.environ.get('EMAIL_REDIRECT_DOMAIN', 'asilinks.com')
EMAIL_PORT = 587
EMAIL_USE_TLS = True


# reCaptcha settings

RECAPTCHA_SECRET_KEY = os.environ.get('RECAPTCHA_SECRET_KEY')
RECAPTCHA_VERIFY_URL = 'https://www.google.com/recaptcha/api/siteverify'


# Sentry Settings

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

sentry_sdk.init(
    dsn=os.environ.get('SENTRY_URL'),
    integrations=[DjangoIntegration()]
)


# Logging Settings

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        'login': {
            'format': '[{asctime}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        # 'auth_file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': 'logs/login-access.log',
        #     'formatter': 'login'
        # },
        'null': {
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        'django': {
            'level': 'INFO',
            'handlers': ['console', ],
        },
        'django.security.DisallowedHost': {
            'level': 'CRITICAL',
            'handlers': ['null'],
            'propagate': False,
        },
        'authentication.serializers': {
            'handlers': ['null'],
            'level': 'INFO',
        },
    },
}


# Testing Layer

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
NOSE_ARGS = [
'--with-coverage',
'--cover-erase',
'--cover-inclusive',
'--cover-package=main,requesting',
'--verbosity=3'
]


# REST Framework settings

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'asilinks.renderers.PdfRenderer',
    ),

    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/minute',
        'user': '100/minute'
    },

    # 'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATETIME_FORMAT': '%s.%f',
    'DATETIME_INPUT_FORMATS': ['%Y-%m-%d %H:%M:%S'],
    'DATE_FORMAT': '%Y-%m-%d',

    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json'
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'PAGE_SIZE': 50
}

from authentication.utils import load_private_key
private_key = load_private_key(os.environ.get('PRIVATE_KEY_PATH'))

JWT_AUTH = {
    'JWT_PRIVATE_KEY': private_key,
    'JWT_PUBLIC_KEY': private_key.public_key(),
    'JWT_ALGORITHM': 'RS256',

    'JWT_VERIFY_EXPIRATION': True,
    'JWT_EXPIRATION_DELTA': dt.timedelta(days=7),

    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': dt.timedelta(minutes=10),

    'JWT_PAYLOAD_HANDLER':
        'authentication.utils.jwt_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'authentication.utils.jwt_response_payload_handler',

    'JWT_PAYLOAD_GET_USERNAME_HANDLER':
        'authentication.utils.jwt_get_username_from_payload_handler',
}

FCM_DJANGO_SETTINGS = {
    "FCM_SERVER_KEY": os.environ.get('FCM_SERVER_KEY'),
    "DELETE_INACTIVE_DEVICES": True,
}


# Celery Settings

# Existe un bug asociado al TIMEZONE: 
# https://github.com/celery/django-celery-beat/commit/2312ab540910a06d7c1b285ed8d09e7576791021
# CELERY_TIMEZONE = 'America/Caracas'

CELERY_BROKER_URL = 'sqs://{}:{}@'.format(
    parse.quote(AWS_ACCESS_KEY_ID, safe=''),
    parse.quote(AWS_SECRET_ACCESS_KEY, safe='')
)
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'region': 'us-west-2',
    'queue_name_prefix': os.environ.get('CELERY_QUEUE_PREFIX_NAME', 'devel_'),
    'polling_interval': 20,
}

CELERY_RESULT_BACKEND = None
CELERY_TASK_DEFAULT_QUEUE = 'queue'
CELERY_TASK_CREATE_MISSING_QUEUES = True
CELERY_TASK_IGNORE_RESULT = False
CELERY_TASK_TIME_LIMIT = 600
CELERY_TASK_SOFT_TIME_LIMIT = 300
CELERY_TASK_TRACK_STARTED = True
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_WORKER_POOL_RESTARTS = True

CELERY_BEAT_SCHEDULE_FILENAME = 'beat_persistent.db'
CELERY_BEAT_SCHEDULE = {

    # main/tasks.py
    'eject_partner': {
        'task': 'eject_partner',
        'schedule': dt.timedelta(hours=24),
    },
    # 'partners_levelup': {
    #     'task': 'partners_levelup',
    #     'schedule': dt.timedelta(days=15),
    # },
    # 'sponsors_levelup': {
    #     'task': 'sponsors_levelup',
    #     'schedule': dt.timedelta(days=15),
    # },
    'check_partners_availability': {
        'task': 'check_partners_availability',
        'schedule': dt.timedelta(hours=2),
    },

    # requesting/tasks.py
    'refresh_round_partners': {
        'task': 'refresh_round_partners',
        'schedule': dt.timedelta(hours=6),
    },
    'unsatisfied_requests': {
        'task': 'unsatisfied_requests',
        'schedule': dt.timedelta(hours=12),
    },
    'failure_deadline_requests': {
        'task': 'failure_deadline_requests',
        'schedule': dt.timedelta(hours=12),
    },
    'close_pending_requests': {
        'task': 'close_pending_requests',
        'schedule': dt.timedelta(hours=12),
    },
    'clean_requests': {
        'task': 'clean_requests',
        'schedule': dt.timedelta(hours=24),
    },
    'requests_without_partners': {
        'task': 'requests_without_partners',
        'schedule': dt.timedelta(minutes=30),
    },
}

# Notebook Settings

NOTEBOOK_ARGUMENTS = [
    '--ip', '0.0.0.0',
    '--port', '8888',
    '--allow-root',
]


# Asilinks Platform Settings

DEFAULT_EMAIL_SPONSOR = 'sponsor@asilinks.com'
DEFAULT_EMAIL_COMMISSIONS = 'fee.system@asilinks.com'
PAYPAL_ACCOUNT = 'fee.paypal@asilinks.com'
DISABLE_VOID_KNOW_FIELDS = False

TESTS_THRESHOLD = {
    'BASE': 24,
    'IOS': 15,
    'IOE': 45,
}
RETRY_TEST_TIME = 90 # days

# Payment Constants

PAYMENT_CONSTANTS = {
    'first_client_payment': d('0.6'),
    'last_client_payment': d('0.4'),
    'request_fees': {
        'asilinks_fee_rate': d('0.005'),
        'sponsor_fee_rate': d('0.0025'),
        'max_asilinks_fee': d('0.12'),
        'total_fee': d('0.15'),
    },
    'paypal_fees': {
        'percent': d('.039'),
        'flat': d('.3'),
        'payout_percent': d('.02'),
        'payout_flat': d('.25'),
        'payout_max': d('20.0'),
    },
}
PENALTY_DISCOUNT = [d('0'), d('.1'), d('.15'), 
    d('.2'), d('.25'), d('.3'), d('.35'), d('.4')]
